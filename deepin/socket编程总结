socket编程其实不难，搞清楚这个过程和可能出现的意外情况，并针对不同应用场景进行合理的处理就可以了。

先聊聊这个通讯过程和各个过程可能出现的问题：

1、服务器端开启并开始监听在某个或某些端口，一般这个时候，监听进程会阻塞（也可以设置为非阻塞，但个人认为这里使用阻塞监听没什么问题，一般我们会使用其他的进程或线程进行和客户端的数据交互。）

这里的服务器端在开始监听的时候，注意判断是否成功，另外一般开启端口重用。如果使用非阻塞监听（accept会立刻返回，而不会停顿在那里，accept如果没有读到数据会改变errno的值。注意判断这个返回值。）

这个时候，应该已经和客户端建立了连接了，在通讯的过程中，因为意外原因，可能会出现网络中断的情况，那么如何去处理这个问题呢，一般我们会把和客户端进行通信的socket连接设置为非阻塞，每次读和写的时候都要判断一下errno是否为0,这样可以尽快发现网络通信是否异常，如果使用了epoll来管理连接，也可以很快的发现出现问题的socket连接，这应该就算是socket编程中需要考虑进取的问题，但也很容易理解，因为，网络连接本来就可能是不稳定的，它不像本机文件，设备文件等等类型，一般情况下不会发生文件突然无法使用的情况。因为，网络的情况更加复杂，尽管如此，也就仅仅多了一个在读写前后判断连接是否异常的过程。还是非常简单的。

我不想理解为什么有人觉得复杂，因为他们根本没有去理解这些代码究竟在干什么，靠死记只会得出，5行代码比1行代码更难记忆这样的结论。和这种人聊天，简直就是浪费时间。

如果说复杂，那就要提提原始套接字编程了，这个才算做复杂，比如，通过diy的方式做一个ping程序，这个时候会用到这个socket类型，这个时候是比较复杂的，因为要了解协议本身，填充这个数据包，然后发送它出去，接收回应数据，再根据协议规定进行解析，这个过程是比较复杂的，但大多数时候并不需要这样做。
