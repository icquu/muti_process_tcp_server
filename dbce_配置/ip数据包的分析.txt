TCP差错控制
超时重传
RTO(超时重传计时器)
发送方TCP为每一条TCP连接设置一个RTO计时器，当计时器超时，重传数据包并重新计时。

快速重传
快速重传机制基于接收端的反馈信息来触发重传；当收到3个重复的ACK包后，立即进行重传，无需等待RTO超时；
当接收端接收到乱序包时，需要立即发送ACK确认(重复最后发送的那个ACK)，不能延迟确认发送。
触发重传后，对方收到这个重传包后，对最后一个包进行ACK确认，完成通讯。

通过计算seq的差值，可以判断中间丢失了多少个字节。
比如：收到了对方的一个包，这个包的next seq是100000，收到的对方的第二个包的seq是110000，那丢失了多少个包呢，（110000-100000）/ 包大小。

案例：定位前置服务器异常的原因。
抓包发现大量重复确认ACK包，
seq:2283986707
ack:3014487599
nxt.seq:2283986707
发送频率约为0.05毫秒发送一次。

通过计算，40分钟内，能发送4800万个重复ACK包，64B*4800W=2.86GB数据

案例：上传身份证系统异常缓慢。
找到的原因是单向丢包，光电模块故障。


SACK选项
是否允许SACK;类型4，长度2
SACK,类型5，变长

3次握手时，如果双方都使用4号选项，该会话会启用SACK功能。
接收方在收到乱序包时，会告诉发送方哪些报文段没有收到，哪些重复收到了，哪些报文段提前收到了等信息。
根据SACK信息，TCP就可以只重传那些真正丢失的报文段
根据丢包的情况，描述需要重传的内容：
ACK： 2001
SACK块1：左沿4001，右沿6001
SACK块2：左沿6001，右沿8001

D-SACK介绍
开启这个功能后，接收方会报告接收到了重复数据包，进一步避免无效重传，确认包丢失情况。

案例：启用SACK机制，可能导致某些网络设备工作不正常，会对包的seq号进行更改的网络设备，如果不能同步的更改包中SACK信息，会导致出现网络问题。
正常的Win或Linux服务器收到错误的SACK后，会忽略SACK选项，继续正常工作。而有的服务器收到错误的SACK后，无法正常处理，导致会话卡死。

ip分片

标识：identification
标志：flags
	长3位，依次分别为：保留位，DF位，MF位
	DF位：当为1时，表示禁止对本数据包进行分片操作。
	MF位：当为1时，表示该包不是最后一个数据包。
段偏移：fragment offset
	长13位
	该字段告诉接收者，段在原始数据报种的位置

ping大包，丢包故障的分析：
...

ID和TTL字段的巧妙用法：
看到重复包，TTL变小，是三层环路；
看到重复包，TTL不变，是二层环路；

用ICMP发现路径MTU
确定路径MTU的方法是发送“DF置位”的ICMP数据包。
当路由器发现IP数据包长度大于MTU时，丢弃数据包，并发回一个要求分片的ICMP报。
将IP数据包长度减小，分片BIT位置1重发，接收返回的ICMP报的分析。
发送一系列的长度递减的，不允许分片的数据包，通过接收返回的ICMP报的分析，可确定路径MTU。

类型为3的icmp包，表示目标不可达。
代码：
0-15分别为：
目标网络不可达
目的主机不可达
目的协议不可达
目的端口不可达
需要分片才能通过但设置了不分片DF位
基于给出的路径的ping失败
目的网络未知
目的主机未知
源被隔离
与目的网络之间通讯被禁止
与目的主机之间通讯被禁止
目的网络拒绝请求的QOS级别
目的主机拒绝请求的QOS级别
由于过滤，通讯被强制禁止
主机越权
优先权终止生效

如何定位网络丢包的根源？
根据协议统计表，可以看到有没有不正常的通讯。

网络协议之ipv6
巨大的可用ip
简洁的头部
更好的qos
安全性更好一些
其它
ipv4：
全长32bits
2^32个地址
点分十进制
ipv6：
全长128bits
2^128个地址
冒号分十六进制

2020:0123:4567:89AB:0000:0000:0000:0001/64
前缀：
2020:0123:4567:89AB
接口标识：
0000:0000:0000:0001
掩码长度：
/64

IPV6地址 = 前缀 + 接口标识
前缀： v4地址种的网络ID
接口标识： v4地址种的主机IP
默认标识子网的IPV6地址前缀长度总为64

2020:123:4567:89AB:0:0:0:1/64
2020:123:4567:89AB:::1/64

注意：双冒号只能出现一次

目前使用的ipv6地址生成规则是：
mac地址中间加入FFFE后，第七位进行反转。
比如，mac地址是 fa:f3:b0:ac:bf:01 那么转换为ipv6的地址后的后64位应该是：
FAF3:B0FF:FEAC:BF01 

组播 
FF02::1:FF12:3456
2001::

单播 任播

链路本地地址
FE80::/10

唯一站点地址，私有地址
FC::/?


TCP选项：
mss
窗口扩大选项，可以让窗口大小超过64k，
类型=3 长度=3 WSF
时间戳选项
用于携带数据包发送时的时间戳，可以用来测量RTT。解决序列号回绕带来的数据包确认问题。
时间戳选项：类型=8 长度=10 本端时间戳 回显时间戳


判断网络和服务质量：
通过TCP会话中的TCP交易统计可以判断是网络延迟还是应用延迟
TCP包中通告的接受窗口，可以理解成接收端所能提供的缓冲区大小。如果窗口持续变小，会影响数据接收效率；如果发送方通告窗口为0，会暂停接收任何数据。
需要关注平均窗口大小，和窗口为0的次数。
通过TCP三次握手判断连接建立是否成功。通过连接失败的情况可以判断网络情况。理想情况下SYN和SYN/ACK的包比值应为1：1
关注连接请求被重置，请求无响应
关注异常的新建连接数过高
关注重传包的数量


如果客户端和防火墙之间的正常通讯被中间设备阻断，比如，有防火墙阻断了客户端的连接，但没有给服务端发送阻断包，那么会出现客户端连接被中断，服务端连接超时的情况。

如果服务器被攻击并被拿到shell并提权成功，如何溯源和处理呢？

网络中产生重复数据包时的两个可能：
交换机环路(TTL没有递减)，路由器环路(TTL递减)。
添加路由规则的时候要留意环路的问题。

异常流量的来源也有可能是缺陷代码照成的。通过查看referer可以排除一下。

TCP的psh位如果置1，接收端收到这个包后，会立即发送到应用层。如果滥用PSH位，相当于服务器端的TCP缓存失效了，会导致服务器响应缓慢，性能下降，导致卡顿。
例如：假设ERP目前负载较大，TCP缓存里有500K的数据。如果此时收到一个500byte的常规数据包，那么这个数据包也会先放在缓存里，待前面的500K传输完毕后，再发送到应用层处理。如果是一个带PSH位的数据包，前面的500K数据会同这个数据包一起被送到应用层处理，如果系统负载已经比较大，可能导致服务器出现相应慢的问题。

丢包率3%已经非常影响传输效率了。
单向丢包，重点考虑网络中的光电模块。
如果抓包发现防火墙内外侧都不同，说明防火墙出了问题。
漏扫有可能造成防火墙挂掉。
流量异常，收发包明显不对称的通讯需要引起注意。

被网络攻击的一种现象是，重启以后，好一会儿，很快就又不行了。

消耗服务器tcp发送缓冲区的攻击：
当客户端窗口持续为0，且会话数量继续增加时，就有大量的数据积压再服务器的socket发送缓存中，造成了服务器无法响应。

对CC攻击，提取特征，进行过滤，效果较好，比如封禁useragent，accept-language等等。建立同一个IP访问同一个url的频率，也可以达到很好的效果。

网站www.check-host.net提供连通性测试报告
这个CC攻击不是靠大的流量完成的拒绝服务攻击，而是利用了另一种方式：
短时间建立约900个链接
使用POST方式声称要向网站的根目录上传数据
在请求头部Content-Length字段标注要上传10000字节的数据
但每隔几秒才向服务器发送1个或几个字节的有效数据。

给出的处理方法: 阻断所有"POST /"的请求。

DNS放大攻击：
通过发送大量DNS请求，让DNS服务器不但要处理大量请求，还需要发送比请求包要大的包，这就形成了放大攻击，攻击目标如果是DNS服务器，就形成了DNS放大攻击。另外通过伪造请求的源IP，就对这个源IP造成了大的流量攻击。

如何找出基于虚假源地址的攻击
需要结合网络结构和对网络通讯底层原理的了解，在多处抓包，验证自己的推测来解决问题。

在流量分析中，常使用对比分析法，排除故障。

某些用户登录缓慢卡顿问题的排查解决。
在查看访问缓慢的客户端浏览器时发现，查看其中的USER-Agent字段，基本都是windows7系统的IE7内核浏览器。
而使用同一台PC，浏览器更换为Chrome浏览器，经过长时间测试，均未出现访问缓慢的现象。
卡顿竟然是因为客户端浏览器的版本，这个原因倒是很难猜到。
因为通过抓包很容易判断网络质量是否存在问题。

案例：某大学频繁发生显示交易成功但校园卡的充值金额迟迟未到账的现象。
在出口防火墙的内外网接口抓包，发现由于请求的数据包比较大，进行了分片发送，存在乱序，但能看到数据包传入了内部网络，接着往后面排查，发现在请求到达服务器之前，数据包已经消失。在WAF后面已经看不到这些分片数据包了。基本确定WAF在处理这个请求的时候，出现了问题。
后面确定是因为触发了WAF的安全策略，对请求进行了拦截。
由此可见，各种网络设备和安全设备除了能够提供一些保护之外，也可能造成网络问题。

案例：网银系统访问慢。
通过在不同网络进出点进行抓包，可以比较准确的找到请求缓慢的原因。

案例：服务器被黑UDF提权。
发现黑客破解MySQL口令后，通过写入文件的方式，提权和执行命令和反弹shell。

案例：邮件服务器失陷。
流量异常的分析

案例：利用Struts2漏洞的攻击。
在Content-type中插入命令字符来执行命令，比如下载，执行，删除等操作。

案例：找到哪些主机注入了木马。
当TCP同步包远大于同步确认包时，说明存在syn攻击或扫描行为。
查找可疑的主动外连行为。
