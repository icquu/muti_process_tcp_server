以下是一段可以保证数据库连接池的稳定性和可靠性的C语言代码，其中包括心跳检测和重连机制：

```
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <time.h>

// Define the maximum number of connections in the pool
#define MAX_POOL_SIZE 10

// Define the connection pool structure
typedef struct {
    void *connection; // Pointer to the database connection
    bool in_use; // Flag to indicate whether the connection is in use
    time_t last_used_time; // Timestamp of the last time the connection was used
} Connection;

// Define the connection pool array
Connection connection_pool[MAX_POOL_SIZE];

// Define the function to initialize the connection pool
void init_pool(char *url, char *username, char *password) {
    // Initialize the database connection for each connection in the pool
    int i;
    for (i = 0; i < MAX_POOL_SIZE; i++) {
        connection_pool[i].connection = create_connection(url, username, password);
        connection_pool[i].in_use = false;
        connection_pool[i].last_used_time = time(NULL);
    }
}

// Define the function to get a connection from the pool
void *get_connection() {
    // Find an available connection in the pool
    int i;
    for (i = 0; i < MAX_POOL_SIZE; i++) {
        if (!connection_pool[i].in_use) {
            // Check if the connection is still alive
            if (is_connection_alive(connection_pool[i].connection)) {
                connection_pool[i].in_use = true;
                connection_pool[i].last_used_time = time(NULL);
                return connection_pool[i].connection;
            } else {
                // Attempt to reconnect if the connection is dead
                if (reconnect_connection(connection_pool[i].connection)) {
                    connection_pool[i].in_use = true;
                    connection_pool[i].last_used_time = time(NULL);
                    return connection_pool[i].connection;
                } else {
                    printf("Failed to reconnect to the database.\n");
                    return NULL;
                }
            }
        }
    }
    // Return NULL if no connections are available in the pool
    printf("No connections available in the pool.\n");
    return NULL;
}

// Define the function to release a connection back to the pool
void release_connection(void *connection) {
    // Find the connection in the pool and mark it as available
    int i;
    for (i = 0; i < MAX_POOL_SIZE; i++) {
        if (connection_pool[i].connection == connection) {
            connection_pool[i].in_use = false;
            connection_pool[i].last_used_time = time(NULL);
            break;
        }
    }
}

// Define the function to destroy the connection pool
void destroy_pool() {
    // Close the database connection for each connection in the pool
    int i;
    for (i = 0; i < MAX_POOL_SIZE; i++) {
        close_connection(connection_pool[i].connection);
    }
}

// Define the functions to create, close and reconnect a database connection
void *create_connection(char *url, char *username, char *password) {
    // Implement the code to create a database connection for the specific database management system
}

void close_connection(void *connection) {
    // Implement the code to close a database connection for the specific database management system
}

bool is_connection_alive(void *connection) {
    // Implement the code to check if the database connection is still alive
}

bool reconnect_connection(void *connection) {
    // Implement the code to reconnect to the database if the connection is dead
    // Return true if the reconnection is successful, false otherwise
}

// Define the function to perform heartbeats on the database connections
void perform_heartbeats() {
    // Check the last used time of each connection in the pool
    int i;
    for (i = 0; i < MAX_POOL_SIZE; i++) {
        if (connection_pool[i].in_use) {
            time_t current_time = time(NULL);
            if (current_time - connection_pool[i].last_used_time > HEARTBEAT_INTERVAL) {
                // Perform a heartbeat on the connection
                if (!is_connection_alive(connection_pool[i].connection)) {
                    // Attempt to reconnect if the connection is dead
                    if (!reconnect_connection(connection_pool[i].connection)) {
                        printf("Failed to reconnect to the database.\n");
                    }
                }
                connection_pool[i].last_used_time = current_time;
            }
        }
    }
}

int main() {
    // Initialize the connection pool
    init_pool("url", "username", "password");

    // Perform heartbeats on the connections at